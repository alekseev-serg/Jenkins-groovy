Agent - указывает, где запускается весь конвейер или конкретный этап. Agent в верхней части блока pipeline должен быть определен обязательно для выполнения. Отдельные директивы agent может быть указана по необходимости в начале отдельных этапов, чтобы указать, где в этих этапах должен выполняться код.
Параметры для agent:
any - Выполните конвейер или этап для любого доступного агента. 
none - При применении на верхнем уровне блока конвейера глобальный агент не будет выделен для всего выполнения конвейера, и каждый раздел Stage должен содержать свой собственный раздел агента. 
label - Выполните конвейер или этап для агента, доступного в среде Jenkins, с предоставленной меткой. 
node - идентичен label, но у node можно указать дополнительный параметр customWorspace.
docker - выполнить конвейер или этап с заданным контейнером, который будет динамически подготовлен на узле, предварительно настроенном для приема конвейеров на основе Docker
dockerfile - выполнить конвейер или этап с контейнером, созданным из файла Docker, содержащегося в исходном репозитории. 
kubernetes - выполнить конвейер или этап внутри модуля, развернутого в кластере Kubernetes. 


Stages - раздел этапов содержит последовательность из одной или нескольких этапов, тут исполняются основные действия в конвейере.
Stage - входит в stages, и содержит steps
Steps - определяет шаги которые должны быть выполнены для stage. В разделе steps у нас может быть любой допустимый оператор DSL, такой как git , sh , echo и т. д.


Post - определяет один или несколько дополнительных шагов, которые выполняются после завершения конвейера или этапа
список условий для post: 
always - выполняется nезависимо от статуса завершения конвейера или этапа. 
aborted - выполняется если конвейер был прерван.
changed - если статус текущей сборки отличается от статуса предыдущей, выполняются шаги в блоке.
cleanup - выполнить шаги после всех остальных условий, независимо от всех состояний.
fixed - выполняется в случае если текущий конвейер или этап был успешным, а прошлый был fail или unstable
failure - если текущая сборка провалилась, выполнить шаги в блоке.
success - текущая сборка прошла успешно, выполняются шаги в блоке.
unstable -  выполнить шаги в сборке если состояние было нестабильным.
unsuccessful - выполняется в случае не успеха.
regression -  выполнятся если текущее с fail или unstable статусе, а предыдущей был успешны

Environment - определяет последовательность пар ключ-значение, которые будут определены как переменные среды для всех шагов или этапов


Применения options, в нем мы используем три дополнительных настройки на уровне pipeline.
timestamp()  печатает время выполнения каждого шага
buildDiscard задает параметры хранения информации о сборке
timeout задает время ожидания для сборки, используется для того чтобы прервать сборку при зависании.

Типы параметров:
string Этот параметр позволяет вводить строку. Подпараметры включают в себя description , defaultValue и name.
text Этот параметр позволяет пользователю вводить несколько строк текста.
booleanParam параметр значения его true/false
choice Этот параметр позволяет пользователю выбирать из списка вариантов. Под параметрами для него являются имя, choices и описание. Здесь choices относится к списку вариантовПервый в списке будет выбран по умолчанию.
password Этот параметр позволяет пользователю вводить пароль. Для паролей введенный текст скрыт.

Пример:
string
parameters { string(name: 'YOURNAME', defaultValue: 'Valera', description: '') }

text
parameters { text(name: 'TEXT', defaultValue: 'One\n2\nThree\n', description: '') }

booleanParam
parameters { booleanParam(name: 'Test', defaultValue: true, description: '') }

choice
parameters { choice(name: 'CHOICES', choices: ['one', '2', 'three'], description: '') }

password
parameters { password(name: 'PASSWORD', defaultValue: 'SECRET', description: '') }